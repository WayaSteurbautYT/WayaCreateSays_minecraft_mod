plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
    mavenCentral()
    maven { url 'https://maven.enginehub.org/repo/' } // For CMU Sphinx
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    
    // Fabric API modules we need
    modImplementation "net.fabricmc.fabric-api:fabric-entity-events-v1:${project.fabric_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-lifecycle-events-v1:${project.fabric_version}"
    
    // CMU Sphinx for voice recognition
    implementation 'edu.cmu.sphinx:sphinx4-core:5prealpha-SNAPSHOT'
    implementation 'edu.cmu.sphinx:sphinx4-data:5prealpha-SNAPSHOT'
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand(
            "version": project.version,
            "fabric_loader_version": project.loader_version,
            "fabric_api_version": project.fabric_version.split("\\.")[0] + "." + project.fabric_version.split("\\.")[1]
        )
    }
    
    // Include all assets and data files
    from(sourceSets.main.resources.srcDirs) {
        exclude 'fabric.mod.json', '*.png', '*.bbmodel', '*.json', '*.mcmeta', '*.ogg', '*.wav', '*.mp3'
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}
